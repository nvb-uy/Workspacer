buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        jcenter()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "0.7.+"
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'


version = '$$MOD_VERSION'
group = '$$MOD_AUTHOR.$$MOD_ID.forge' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = '$$MOD_ID-Forge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'official', version: '1.18.2'

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + String.valueOf(mod_id) + '.mixins.json'
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                $$MOD_ID {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            arg '-mixin.config=' + String.valueOf(mod_id) + '.mixins.json'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                $$MOD_ID {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', '$$MOD_ID'

            mods {
                $$MOD_ID {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', '$$MOD_ID', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                $$MOD_ID {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "$$MOD_ID.refmap.json"
}

repositories {
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.85'
    annotationProcessor 'org.spongepowered:mixin:0.8.3:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "$$MOD_NAME",
                "Specification-Vendor"    : "$$MOD_AUTHOR",
                "Specification-Version"   : "$$MOD_VERSION",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "$$MOD_AUTHOR",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}